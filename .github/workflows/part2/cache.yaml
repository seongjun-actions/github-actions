name: cache
on:
  push:
    # my-app 하위에 속한 파일들 중 어느 파일이든 변경사항이 생길 때에만 push event가 workflow를 trigger하도록 설정한 것이다.
    paths:
      - "my-app/**"

jobs:
  cache:
    runs-on: ubuntu-latest
    steps:
      # 내 레포지토리의 코드를 가져온다.
      - name: checkout
        uses: actions/checkout@v4
        # setup-node로 with 옵션을 통해 18버전의 node를 install한다
      - name: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 18
        # cache action을 사용한다.
        # with 옵션으로 path와 key, 그리고 restore-keys를 input값으로 전달한다.
        # 이렇게 cache action을 설정하면 이후에 같은 운영체제에서 동일한 package-lock.json을 가진 workflow가 실행될 때 이전에 저장했던 cache를 사용해서 의존성 설치를 빠르게 할 수 있다.
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          # path: caching할 경로를 뜻하고 그 경로 값으로 nodejs의 모듈이 저장되는 .npm을 지정했다.
          path: ~/.npm
          # key: cache의 key를 뜻하고 그 값으로는 os 종류 + package-lock.json의 hash값으로 구성된다.(운영체제별 의존성별로 해시를 구분하기 위함)
          # runner.os는 깃허브 액션을 실행하는 운영체제를 말함.
          # nodejs의 모듈을 cache한다는 의미로 사용함
          # hashFiles는 해당 파일의 해시값을 뱉는다.
          # hashFiles는 해당 경로의 파일이 바뀔 때에만 해시값이 변경되기 때문에 새로운 의존성이 추가되거나 기존 의존성이 변경되었을 때 새로운 해시를 생성하기 위해 사용한다.
          key: ${{ runner.os }}-node-${{hashFiles('**/package-lock.json')}}
          # restore-keys는 cache 복구를 위한 key이다.
          # key가 정확히 일치하는 cache가 없는 경우 가장 가까운 cache를 찾아서 사용하기 위함이다.
          restore-keys: |
            ${{runner.os}}-node-
        # my-app이라는 디렉토리에서 필요한 dependency들을 설치한다.
      - name: Install dependencies
        run: |
          cd my-app
          npm ci
        # my-app 디렉토리에서 빌드 작업을 수행한다.
        # 이 작업을 처음 실행할 때는 아직 caching되지 않았기에 처음에는 cache가 없다는 메세지가 나올 것임
        # 그리고 cache action을 처음 사용하고 완료되었다면 cache를 save했다는 메세지를 볼 수 있을 것임
      - name: npm build
        run: |
          cd my-app
          npm run build
